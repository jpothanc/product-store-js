npm install --save-dev @babel/core babel-jest

These packages provide:
jest: The testing framework
supertest: For testing HTTP endpoints
@babel/preset-env and @babel/core: For ES Modules support
babel-jest: Babel integration with Jest
After installing, you can run your integration tests with npm test as mentioned before.

to fox this:
Jest did not exit one second after the test run has completed.
'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.

You need to seperate the server.js and app.js in to sepearte file

Swagger
npm install swagger-autogen swagger-ui-express

to make it less verbos, 
run npm src/swagger.js which generates swagger-output.json

package.json generate this doc before restart
"scripts": {
    "start": "node src/swagger.js && node src/server.js",
    "dev": "node src/swagger.js && nodemon src/server.js",
   
  },

npm start 
npm run dev for dev and auto detecting API changes


Auth
curl -X GET "http://localhost:3002/api/v1/products/product?code=0002.HK" -u admin:admin
curl -X GET "http://localhost:3002/api/v1/products/product?code=0002.HK" -H "Authorization: Basic YWRtaW46cGFzc3dvcmQxMjM="


curl -X GET "http://20.2.153.240:3002/api/v1/products/product?code=0002.HK" -u admin:admin


tests
npm test
npm coverage

Docker
# Build the Docker image
docker build -t product-store .


# Run the container
docker run --env-file .env -p 3000:3002  kaljessy/productstorejs:latest
docker ps 
docker stop <ID>


Test docker
.env file has port 3002
docker run --env-file .env -p 3000:3002 productstorejs:latest
3000 - docker port
3002-container port on which the client runs
curl -X GET "http://localhost:3000/api/v1/products/product?code=0002.HK" -u admin:admin

Push
docker login

docker push kaljessy/productstorejs:latest

docker images

docker pull kaljessy/productstorejs:latest
docker run --env-file .env -p 3000:3002 productstorejs:latest

Remove:
docker rmi kaljessy/productstorejs:latest


Building for production
- Using esbuild
needs these packages
"esbuild": "^0.24.2",
"esbuild-node-externals": "^1.16.0",
"esbuild-plugin-copy": "^2.1.1",

Create build.js
as we are using esmodules we will have to externalize "path", "fs", "url", "os" in esbuild build file 
in packaje.json, under scripts add these
 "scripts": {
    "build": "node build.js",

  